{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc4b Welcome to ArgoCD Pipeline Trigger","text":"<p>A robust, secure, and GitOps-friendly solution to trigger ArgoCD syncs from CI/CD pipelines \u2014 complete with Slack/Telegram notifications, observability, Helm chart deployment, and Go-based tooling.</p> <p></p>"},{"location":"#what-is-this","title":"\u2728 What is this?","text":"<p>ArgoCD Pipeline Trigger is a modern DevOps tool that enables you to automatically sync ArgoCD apps whenever you merge a PR or trigger a CI/CD pipeline.</p> <p>It includes: - \u2705 Go CLI to trigger syncs manually or from pipelines</p> <ul> <li> <p>\u2705 Webhook Receiver to automate triggers via HTTP</p> </li> <li> <p>\u2705 Notifications via Slack and Telegram</p> </li> <li> <p>\u2705 Exporter endpoint for Prometheus (<code>/metrics</code>)</p> </li> <li> <p>\u2705 Helm Chart for production-ready deployment</p> </li> </ul>"},{"location":"#who-is-it-for","title":"\ud83d\udd0d Who is it for?","text":"<ul> <li>DevOps Engineers looking to automate ArgoCD</li> <li>SREs seeking GitOps-safe syncs and notifications</li> <li>Platform Engineers building GitHub \u2192 Argo pipelines</li> <li>Engineering teams that need traceability and visibility in deploys</li> </ul>"},{"location":"#why-was-it-built","title":"\ud83e\udde0 Why was it built?","text":"<p>Most GitOps teams want to keep ArgoCD declarative \u2014 but also want control over when a sync happens. This project bridges CI with GitOps using a clean Go CLI, observable receiver, and best practices in infrastructure security and deployment.</p>"},{"location":"#features-at-a-glance","title":"\ud83d\udce6 Features at a Glance","text":"Feature Description \u2705 Go CLI <code>argocd-sync</code> syncs apps via ArgoCD API \ud83c\udf10 Webhook Receiver HTTP endpoint for pipelines (GitHub, GitLab, etc.) \ud83d\udd14 Notifications Slack + Telegram support with emoji and markdown \ud83d\udcc8 Prometheus Metrics Built-in metrics endpoint + ServiceMonitor support \ud83c\udfaf Helm Chart Deploy it anywhere with GitOps compatibility \ud83d\udd10 Secure by Design Secrets via env/Helm, timeout, no default creds \ud83d\udd2c Observability Full dashboard support via Grafana"},{"location":"#ready-to-try-it","title":"\ud83d\ude80 Ready to try it?","text":"<p>Start with the Quickstart guide and deploy your first automated sync with notifications in under 2 minutes.</p> <p>Looking to contribute? Check the Contributing guide.</p>"},{"location":"CHANGELOG/","title":"\ud83d\udce6 Changelog","text":""},{"location":"CHANGELOG/#v100-2025-04-18","title":"[v1.0.0] - 2025-04-18","text":"<p>\ud83c\udf89 Initial production-ready release</p>"},{"location":"CHANGELOG/#features","title":"\ud83d\ude80 Features","text":"<ul> <li>CLI <code>argocd-sync</code> written in Go with Cobra</li> <li>Webhook Receiver service with Prometheus <code>/metrics</code></li> <li>Slack and Telegram notifications with rich formatting</li> <li>Full Helm Chart for Kubernetes deployment</li> <li>Dockerfiles (distroless, secure, non-root)</li> <li>Grafana dashboard via ConfigMap</li> <li>CI/CD integration examples (GitHub, GitLab, Bitbucket, Jenkins, CircleCI)</li> <li>MkDocs documentation site with Material theme</li> </ul>"},{"location":"CHANGELOG/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>Auth via <code>Bearer Token</code> in <code>/sync</code> endpoint</li> <li>Secrets handled via ENV or Kubernetes Secrets</li> <li>JSON request validation for safety</li> <li>Non-root distroless images</li> </ul>"},{"location":"CHANGELOG/#observability","title":"\ud83d\udcc8 Observability","text":"<ul> <li>Prometheus metrics: <code>sync_total</code>, <code>sync_duration</code></li> <li>Grafana dashboard for sync monitoring</li> <li>Custom labels: <code>app</code>, <code>status</code>, <code>duration</code></li> </ul>"},{"location":"CHANGELOG/#tooling","title":"\ud83e\uddea Tooling","text":"<ul> <li><code>Makefile</code> with build, lint, scan, docker</li> <li><code>docker-compose.yml</code> for local Prometheus + Receiver</li> <li>Test scripts in Go and Python</li> </ul> <p>Looking for older releases? Stay tuned for versioned tags and GitHub Releases.</p> <p>Want to contribute? Check out CONTRIBUTING.md.</p>"},{"location":"CONTRIBUTING/","title":"\ud83e\udd1d Contributing to ArgoCD Pipeline Trigger","text":"<p>Welcome! \ud83c\udf89 First of all, thank you for considering contributing to this project. Whether you\u2019re fixing bugs, adding new features, or improving documentation, we\u2019re grateful for your help.</p>"},{"location":"CONTRIBUTING/#project-philosophy","title":"\ud83e\uddf1 Project Philosophy","text":"<p>ArgoCD Pipeline Trigger aims to be: - \ud83d\udca1 Simple: Easy to use and extend</p> <ul> <li> <p>\ud83d\udd10 Secure: Safe by default</p> </li> <li> <p>\ud83d\udcca Observable: Prometheus and alert-ready</p> </li> <li> <p>\ud83d\udd01 GitOps-native: Ready for real CI/CD pipelines</p> </li> <li> <p>\ud83e\uddf0 DevOps-first: Designed for real-world infra</p> </li> </ul>"},{"location":"CONTRIBUTING/#how-to-contribute","title":"\ud83d\udee0 How to Contribute","text":""},{"location":"CONTRIBUTING/#1-fork-and-clone","title":"1. Fork and Clone","text":"<pre><code>git clone https://github.com/YOUR_USERNAME/argocd-pipeline-trigger.git\ncd argocd-pipeline-trigger\ngit checkout -b my-feature\n</code></pre>"},{"location":"CONTRIBUTING/#2-run-locally","title":"2. Run Locally","text":"<pre><code>make build-webhook\nmake run-webhook\n</code></pre> <p>Or with Docker:</p> <pre><code>make docker-webhook\n</code></pre>"},{"location":"CONTRIBUTING/#3-add-your-changes","title":"3. Add Your Changes","text":"<p>Follow existing coding patterns, use idiomatic Go, and include comments when necessary.</p>"},{"location":"CONTRIBUTING/#4-test-your-feature","title":"4. Test Your Feature","text":"<pre><code>go test ./...\n</code></pre> <p>Check with: <pre><code>make lint\n</code></pre></p>"},{"location":"CONTRIBUTING/#5-open-pull-request","title":"5. Open Pull Request","text":"<p>Please include: - A clear title and description - Screenshots or logs if applicable - Reference to any issues (e.g. <code>Fixes #12</code>)</p>"},{"location":"CONTRIBUTING/#code-guidelines","title":"\u2705 Code Guidelines","text":"<ul> <li>Follow Effective Go</li> <li>Format with <code>go fmt</code></li> <li>Use <code>cobra</code> for CLI</li> <li>Tests with <code>testing</code> or <code>testify</code></li> <li>Metrics via <code>prometheus/client_golang</code></li> <li>Secrets via env/Helm only</li> </ul>"},{"location":"CONTRIBUTING/#communication","title":"\ud83d\udcac Communication","text":"<p>Feel free to open issues, or start a discussion via Pull Request. Feature ideas are welcome!</p>"},{"location":"CONTRIBUTING/#license","title":"\ud83d\udcc4 License","text":"<p>By contributing, you agree that your contributions will be licensed under the MIT License.</p> <p>Thank you for making ArgoCD Pipeline Trigger better! \ud83d\ude4f</p> <p>\u2014 Giovanni Colognesi</p>"},{"location":"architecture/","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>ArgoCD Pipeline Trigger follows a modular and extensible architecture with clear separation of responsibilities, security-first design, and GitOps-native patterns.</p>"},{"location":"architecture/#high-level-diagram","title":"\ud83d\udcd0 High-Level Diagram","text":"<pre><code>+------------------+           +-------------------+           +----------------+\n|   GitHub / CI    |  POST --&gt; |  Webhook Receiver  |  Sync --&gt; |   ArgoCD App    |\n+------------------+           +-------------------+           +----------------+\n                                           |   |                     \n                                           |   |--&gt; Notify (Slack/Telegram)\n                                           |   |--&gt; Export /metrics (Prometheus)\n</code></pre>"},{"location":"architecture/#components","title":"\ud83d\udd0b Components","text":"Component Description <code>argocd-sync</code> CLI Local command-line interface to trigger ArgoCD apps Webhook Receiver Listens to <code>/sync</code> POSTs, runs sync, emits metrics &amp; notifs Notifier Slack/Telegram notification layer with custom formatter Helm Chart Production-ready deployment with observability and security"},{"location":"architecture/#security-boundaries","title":"\ud83d\udd10 Security Boundaries","text":"<ul> <li>Sync only happens on verified <code>POST /sync</code></li> <li>Tokens are never exposed \u2014 injected via Secrets</li> <li>Distroless image and non-root runtime</li> <li>Metrics and HTTP exposed on separate endpoints</li> </ul>"},{"location":"architecture/#observability","title":"\ud83d\udd0e Observability","text":"<ul> <li>Prometheus <code>/metrics</code> endpoint with detailed counters and histograms</li> <li>Grafana dashboard included in Helm chart</li> <li>CI/CD traceability via webhook integration</li> </ul>"},{"location":"architecture/#extensibility","title":"\ud83d\udd04 Extensibility","text":"<p>The architecture is modular and can be extended with: - HMAC or mTLS verification (auth) - Custom notifiers (Discord, MS Teams, etc.) - App-specific sync rules or retries - Payload enrichment (commit SHA, PR number)</p> <p>ArgoCD Pipeline Trigger was built to balance simplicity, observability, and flexibility \u2014 making it ideal for modern GitOps workflows.</p>"},{"location":"cli/","title":"\u2699\ufe0f CLI: argocd-sync","text":"<p>The CLI tool <code>argocd-sync</code> allows you to trigger ArgoCD application syncs directly from pipelines, scripts, or terminals.</p>"},{"location":"cli/#installation","title":"\ud83d\udce6 Installation","text":""},{"location":"cli/#build-locally","title":"\ud83e\uddea Build locally","text":"<pre><code>make build-trigger\n</code></pre> <p>Or build manually:</p> <pre><code>go build -o bin/argocd-sync .\n</code></pre>"},{"location":"cli/#usage","title":"\ud83d\ude80 Usage","text":"<pre><code>./bin/argocd-sync sync \\\n  --app my-app \\\n  --server https://argocd.example.com \\\n  --username admin \\\n  --password secret \\\n  --insecure\n</code></pre>"},{"location":"cli/#flags","title":"\ud83d\udcd6 Flags","text":"Flag Description <code>--app</code> ArgoCD Application name <code>--server</code> ArgoCD API Server URL <code>--username</code> ArgoCD login username <code>--password</code> ArgoCD password or token <code>--insecure</code> Skip TLS verification (optional)"},{"location":"cli/#use-in-cicd","title":"\ud83d\udd04 Use in CI/CD","text":"<p>GitHub Actions: <pre><code>- name: Sync app with ArgoCD\n  run: ./bin/argocd-sync sync --app my-app --server https://argocd.example.com --username $ARGO_USER --password $ARGO_PASS\n</code></pre></p> <p>GitLab CI: <pre><code>sync:\n  script:\n    - ./bin/argocd-sync sync --app $CI_APP --server $ARGO_URL --username $ARGO_USER --password $ARGO_PASS\n</code></pre></p>"},{"location":"cli/#source","title":"\ud83d\udcc1 Source","text":"<p>See the implementation in <code>cmd/sync.go</code>.</p>"},{"location":"docker/","title":"\ud83d\udc33 Docker &amp; Local Testing","text":"<p>This project includes Dockerfiles for both the CLI (<code>argocd-sync</code>) and the webhook receiver, as well as a <code>docker-compose.yml</code> for local development and testing.</p>"},{"location":"docker/#docker-overview","title":"\ud83e\uddf1 Docker Overview","text":"Component Image Path Dockerfile CLI Tool <code>argocd-sync:latest</code> <code>dockerfiles/trigger/Dockerfile</code> Webhook Receiver <code>webhook-receiver:latest</code> <code>dockerfiles/receiver/Dockerfile</code>"},{"location":"docker/#build-the-cli-docker-image","title":"\u2699\ufe0f Build the CLI Docker Image","text":"<pre><code>docker build -f dockerfiles/trigger/Dockerfile -t argocd-sync:latest .\n</code></pre>"},{"location":"docker/#run-the-cli-container","title":"Run the CLI Container","text":"<pre><code>docker run --rm argocd-sync:latest \\\n  sync \\\n  --app my-app \\\n  --server https://argocd.example.com \\\n  --username admin \\\n  --password secret \\\n  --insecure\n</code></pre>"},{"location":"docker/#build-the-receiver-docker-image","title":"\ud83c\udf10 Build the Receiver Docker Image","text":"<pre><code>docker build -f dockerfiles/receiver/Dockerfile -t webhook-receiver:latest .\n</code></pre>"},{"location":"docker/#run-the-webhook-receiver","title":"Run the Webhook Receiver","text":"<pre><code>docker run --rm -p 8080:8080 \\\n  -e ENABLE_TELEGRAM=true \\\n  -e TELEGRAM_BOT_TOKEN=xxxx \\\n  -e TELEGRAM_CHAT_ID=xxxx \\\n  webhook-receiver:latest\n</code></pre>"},{"location":"docker/#local-testing-with-docker-compose","title":"\ud83e\uddea Local Testing with Docker Compose","text":"<p>A <code>docker-compose.yml</code> is included to spin up: - Webhook Receiver - Prometheus (scraping metrics) - Grafana (dashboard view)</p>"},{"location":"docker/#start-it-up","title":"\ud83c\udfc1 Start it up","text":"<pre><code>docker-compose up --build\n</code></pre>"},{"location":"docker/#test-webhook","title":"\ud83d\udcec Test Webhook","text":"<pre><code>curl -X POST http://localhost:8080/sync \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"app\":\"demo-app\"}'\n</code></pre> <p>You should see: - ArgoCD sync log in terminal - Telegram/Slack notification (if enabled) - <code>/metrics</code> exposed for Prometheus</p>"},{"location":"docker/#testing-notification-format-only","title":"\ud83e\uddea Testing Notification Format Only","text":"<pre><code>go run tests/test_notify_telegram.go\n</code></pre> <p>or</p> <pre><code>python3 scripts/test_webhook.py http://localhost:8080/sync\n</code></pre> <p>This makes testing and iterating locally easy and fully observable. See the README for full project context.</p>"},{"location":"helm/","title":"\ud83e\udded Helm Deployment","text":"<p>This project includes a production-ready Helm chart to deploy the webhook receiver and all its capabilities (metrics, secrets, notifications).</p>"},{"location":"helm/#chart-location","title":"\ud83d\udcc1 Chart Location","text":"<pre><code>charts/webhook-receiver/\n</code></pre>"},{"location":"helm/#install","title":"\ud83d\ude80 Install","text":"<pre><code>helm upgrade --install webhook charts/webhook-receiver \\\n  --namespace default --create-namespace\n</code></pre>"},{"location":"helm/#values-overview","title":"\u2699\ufe0f Values Overview","text":"Key Description <code>notifications.slack.enabled</code> Enable Slack notifier <code>notifications.slack.webhookUrl</code> Slack Webhook URL (via Secret) <code>notifications.telegram.enabled</code> Enable Telegram notifier <code>notifications.telegram.botToken</code> Bot Token (via Secret) <code>notifications.telegram.chatId</code> Chat ID (via Secret) <code>metrics.enabled</code> Enable Prometheus exporter <code>metrics.path</code> Path to metrics endpoint <code>metrics.port</code> Port for metrics exposure"},{"location":"helm/#secrets-handling","title":"\ud83d\udd10 Secrets Handling","text":"<p>We recommend creating Kubernetes secrets externally:</p> <pre><code>kubectl create secret generic webhook-receiver-secrets \\\n  --from-literal=telegramBotToken=\"&lt;token&gt;\" \\\n  --from-literal=telegramChatId=\"&lt;chat_id&gt;\"\n</code></pre>"},{"location":"helm/#servicemonitor-prometheus-operator","title":"\ud83d\udce1 ServiceMonitor (Prometheus Operator)","text":"<p>Deploy manually or use <code>helm template</code>: <pre><code>kubectl apply -f charts/webhook-receiver/templates/servicemonitor.yaml\n</code></pre></p>"},{"location":"helm/#grafana-dashboard","title":"\ud83c\udfa8 Grafana Dashboard","text":"<p>A dashboard is included via ConfigMap: <pre><code>kubectl apply -f charts/webhook-receiver/templates/grafana-dashboard.yaml\n</code></pre></p> <p>This allows dashboards to be versioned as code and loaded via sidecar.</p>"},{"location":"helm/#test-receiver","title":"\ud83e\uddea Test Receiver","text":"<pre><code>kubectl port-forward svc/webhook-receiver 8080:80\n</code></pre> <p>Then send a sync request: <pre><code>curl -X POST http://localhost:8080/sync -H \"Content-Type: application/json\" -d '{\"app\":\"test-app\"}'\n</code></pre></p> <p>The Helm chart is maintained under <code>charts/</code> and accepts PRs for new features, values, and templates.</p>"},{"location":"integrations/","title":"\ud83d\udd14 Integrations: Slack, Telegram, CI/CD","text":"<p>ArgoCD Pipeline Trigger offers seamless integration with modern toolchains including CI/CD, Slack, and Telegram to improve visibility and automation.</p>"},{"location":"integrations/#slack-notifications","title":"\ud83d\udcac Slack Notifications","text":""},{"location":"integrations/#setup","title":"\ud83d\udd27 Setup","text":"<ol> <li>Create an Incoming Webhook</li> <li>Store it in a Kubernetes secret:</li> </ol> <pre><code>kubectl create secret generic webhook-receiver-secrets \\\n  --from-literal=slackWebhookUrl=\"https://hooks.slack.com/services/...\"\n</code></pre> <ol> <li>Enable in <code>values.yaml</code>: <pre><code>notifications:\n  slack:\n    enabled: true\n</code></pre></li> </ol>"},{"location":"integrations/#message-example","title":"\u2705 Message Example","text":"<pre><code>\u2705 Sync Triggered\n\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb Giovanni Colognesi - ArgoCD Trigger\n\ud83d\udd39 App: `my-app`\n\u23f1\ufe0f Duration: `0.82s`\n</code></pre>"},{"location":"integrations/#telegram-notifications","title":"\ud83d\udcf2 Telegram Notifications","text":""},{"location":"integrations/#setup_1","title":"\ud83d\udd27 Setup","text":"<ol> <li>Talk to @BotFather</li> <li>Create a bot and get the token</li> <li>Start a conversation or group with the bot</li> <li> <p>Find your chat ID: <pre><code>curl https://api.telegram.org/bot&lt;token&gt;/getUpdates\n</code></pre></p> </li> <li> <p>Create a Kubernetes secret: <pre><code>kubectl create secret generic webhook-receiver-secrets \\\n  --from-literal=telegramBotToken=\"123:ABC\" \\\n  --from-literal=telegramChatId=\"12345678\"\n</code></pre></p> </li> <li> <p>Enable in <code>values.yaml</code>: <pre><code>notifications:\n  telegram:\n    enabled: true\n</code></pre></p> </li> </ol>"},{"location":"integrations/#cicd-pipelines","title":"\ud83d\udd01 CI/CD Pipelines","text":"<p>Use <code>curl</code> to trigger the webhook after deploys:</p>"},{"location":"integrations/#github-actions","title":"GitHub Actions","text":"<pre><code>- name: Trigger ArgoCD sync\n  run: |\n    curl -X POST https://your-receiver/sync \\\n      -H \"Content-Type: application/json\" \\\n      -d '{\"app\":\"my-app\"}'\n</code></pre>"},{"location":"integrations/#gitlab-ci","title":"GitLab CI","text":"<pre><code>trigger:\n  script:\n    - curl -X POST https://receiver/sync -H \"Content-Type: application/json\" -d '{\"app\":\"my-app\"}'\n</code></pre>"},{"location":"integrations/#testing-notifications","title":"\ud83e\uddea Testing Notifications","text":"<p>Use the Go or Python scripts provided under <code>scripts/</code>:</p> <pre><code>go run scripts/test_notify_telegram.go\npython3 scripts/test_webhook.py\n</code></pre> <p>These allow you to validate formatting and delivery without deploying to K8s.</p>"},{"location":"metrics/","title":"\ud83d\udcc8 Metrics &amp; Observability","text":"<p>ArgoCD Pipeline Trigger includes native support for Prometheus metrics and Grafana dashboards \u2014 allowing teams to monitor sync events, performance, and failure rates.</p>"},{"location":"metrics/#endpoint","title":"\ud83d\udd0c Endpoint","text":"<p>A <code>/metrics</code> endpoint is exposed on the receiver:</p> <pre><code>GET /metrics\n</code></pre> <p>Use <code>kubectl port-forward</code> or a Kubernetes ServiceMonitor to scrape it.</p>"},{"location":"metrics/#metrics-available","title":"\ud83d\udcca Metrics Available","text":"Metric Type Labels Description <code>argocd_sync_total</code> Counter <code>app</code>, <code>status</code> Total syncs triggered per app/status <code>argocd_sync_duration_seconds</code> Histogram <code>app</code> Duration of sync operation in seconds"},{"location":"metrics/#visualize-with-grafana","title":"\ud83d\udd0d Visualize with Grafana","text":"<p>A dashboard is provided as a ConfigMap and includes: - Total syncs (stat) - Sync duration per app (graph) - Sync rate and errors (table)</p> <p>See: <code>templates/grafana-dashboard.yaml</code></p>"},{"location":"metrics/#prometheus-operator","title":"\ud83e\udded Prometheus Operator","text":"<p>The Helm chart also includes a <code>ServiceMonitor</code>:</p> <pre><code>apiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\n</code></pre> <p>Enable it with: <pre><code>kubectl apply -f charts/webhook-receiver/templates/servicemonitor.yaml\n</code></pre></p> <p>Or template via Helm.</p>"},{"location":"metrics/#example-queries","title":"\ud83e\udde0 Example Queries","text":"<pre><code>sum(rate(argocd_sync_total[5m])) by (app)\nrate(argocd_sync_total{status=\"failure\"}[5m])\navg(argocd_sync_duration_seconds) by (app)\n</code></pre> <p>These queries can be used to build alerts or dashboards for: - Deployment frequency (DORA metric) - Failure rate - Time to deploy</p> <p>For more, visit the Grafana page or use the included dashboard JSON.</p>"},{"location":"quickstart/","title":"\ud83d\ude80 Quickstart: ArgoCD Pipeline Trigger","text":"<p>Get your Webhook Receiver up and running with Helm + Telegram integration in under 2 minutes.</p>"},{"location":"quickstart/#prerequisites","title":"\ud83e\udded Prerequisites","text":"<ul> <li>Kubernetes cluster (Kind, Minikube, EKS, etc.)</li> <li>Helm installed (<code>v3+</code>)</li> <li>Telegram bot created (via @BotFather)</li> </ul>"},{"location":"quickstart/#1-clone-the-repository","title":"1. Clone the repository","text":"<pre><code>git clone https://github.com/giovanni-gava/argocd-pipeline-trigger.git\ncd argocd-pipeline-trigger\n</code></pre>"},{"location":"quickstart/#2-get-your-telegram-chat-id","title":"2. Get your Telegram Chat ID","text":"<ol> <li>Create your bot with @BotFather</li> <li>Send a message to the bot</li> <li>Run:</li> </ol> <pre><code>curl -s \"https://api.telegram.org/bot&lt;TELEGRAM_BOT_TOKEN&gt;/getUpdates\"\n</code></pre> <ol> <li>Copy the value of <code>chat.id</code></li> </ol>"},{"location":"quickstart/#3-create-the-secret-with-your-telegram-credentials","title":"3. Create the secret with your Telegram credentials","text":"<pre><code>kubectl create secret generic webhook-receiver-secrets \\\n  --from-literal=telegramBotToken=\"&lt;TELEGRAM_BOT_TOKEN&gt;\" \\\n  --from-literal=telegramChatId=\"&lt;TELEGRAM_CHAT_ID&gt;\"\n</code></pre>"},{"location":"quickstart/#4-install-using-helm","title":"4. Install using Helm \ud83d\ude80","text":"<pre><code>helm upgrade --install webhook charts/webhook-receiver \\\n  --set notifications.telegram.enabled=true\n</code></pre>"},{"location":"quickstart/#5-send-a-test-webhook","title":"5. Send a test Webhook","text":"<pre><code>kubectl port-forward svc/webhook-receiver 8080:80\n</code></pre> <pre><code>curl -X POST http://localhost:8080/sync \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"app\": \"demo-app\"}'\n</code></pre>"},{"location":"quickstart/#expected-result","title":"\ud83d\udcec Expected Result","text":"<p>You should receive a message in Telegram:</p> <pre><code>\u2705 Sync Triggered\n\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb Giovanni Colognesi - ArgoCD Trigger\n\ud83d\udd39 App: `demo-app`\n\u23f1\ufe0f Duration: `XYZms`\n</code></pre>"},{"location":"quickstart/#done","title":"\u2705 Done!","text":"<p>Your Webhook Receiver with metrics, logging, and notifications is now up and running.</p> <p>Explore: - <code>/metrics</code> endpoint for Prometheus - Full Helm chart in <code>charts/webhook-receiver</code> - CI/CD pipeline integration via <code>curl</code></p> <p>Need help? Reach out on LinkedIn or open an issue on GitHub \ud83d\udc99</p>"},{"location":"receiver/","title":"\ud83c\udf10 Webhook Receiver","text":"<p>The Webhook Receiver is a lightweight, stateless HTTP service built in Go that listens for <code>POST</code> requests from CI/CD tools and triggers an ArgoCD sync operation.</p>"},{"location":"receiver/#how-it-works","title":"\ud83d\udd27 How it works","text":"<ol> <li>CI merges a PR (e.g., GitHub/GitLab)</li> <li>CI sends a <code>POST /sync</code> to the Webhook Receiver</li> <li>Receiver runs <code>argocd app sync &lt;app&gt;</code> locally</li> <li>Duration and status are measured and exposed as Prometheus metrics</li> <li>A notification is sent to Slack/Telegram (optional)</li> </ol>"},{"location":"receiver/#security-considerations","title":"\ud83d\udd10 Security Considerations","text":"Area Strategy Transport Use TLS (via ingress/controller) Auth Can be extended with token header (planned) Secrets Managed via Kubernetes Secret only Timeout Sync process has hard timeout (default: 10s) Rate limit Recommend external NGINX / Gateway limiters Input Strict JSON decoding and validation"},{"location":"receiver/#payload-format","title":"\ud83d\udce8 Payload format","text":"<pre><code>{\n  \"app\": \"my-argocd-app\"\n}\n</code></pre> <p>If the <code>app</code> field is missing or malformed, the receiver responds with <code>400 Bad Request</code>.</p>"},{"location":"receiver/#sample-response","title":"\u2705 Sample Response","text":"<pre><code>HTTP/1.1 200 OK\n\nok\n</code></pre> <p>On error: <pre><code>HTTP/1.1 500 Internal Server Error\n\nsync failed: app not found\n</code></pre></p>"},{"location":"receiver/#why-not-use-argocd-webhooks-directly","title":"\ud83d\udd01 Why not use ArgoCD webhooks directly?","text":"<p>This project decouples sync automation from ArgoCD itself, allowing teams to: - Add metrics, alerts, dashboards - Control sync timing and conditions - Integrate notifications - Keep ArgoCD declarative while syncing on-demand</p>"},{"location":"security/","title":"\ud83d\udd10 Security Best Practices","text":"<p>ArgoCD Pipeline Trigger is designed with safety and production-readiness in mind. Below are the key practices and features included to support secure deployment and usage.</p>"},{"location":"security/#transport-security","title":"\u2705 Transport Security","text":"<ul> <li>All traffic should be secured via TLS termination</li> <li>Use Ingress controllers or service mesh (Istio, Linkerd) for HTTPS</li> <li>Do not expose the webhook directly without protection</li> </ul>"},{"location":"security/#secret-management","title":"\ud83d\udd11 Secret Management","text":"What How it's secured Slack Webhook URL Kubernetes Secret Telegram Bot Token Kubernetes Secret Telegram Chat ID Kubernetes Secret Receiver Auth Token Kubernetes Secret or Env Var <p>Use sealed-secrets or SOPS for GitOps-friendly secret management.</p>"},{"location":"security/#runtime-protections","title":"\ud83e\uddf1 Runtime Protections","text":"<ul> <li>Webhook requests use timeouts (10s) to prevent long-running calls</li> <li>Docker images are based on distroless to minimize attack surface</li> <li>User runs as non-root (<code>runAsUser: 65532</code>)</li> </ul>"},{"location":"security/#input-validation","title":"\ud83e\uddea Input Validation","text":"<ul> <li>Payloads are parsed as strict JSON</li> <li>Requests missing <code>app</code> or malformed will return <code>400 Bad Request</code></li> </ul>"},{"location":"security/#authentication-bearer-token","title":"\ud83d\udd10 Authentication (Bearer Token)","text":"<p>For additional protection, the <code>/sync</code> endpoint supports optional Bearer Token authentication.</p>"},{"location":"security/#enable-authentication","title":"Enable Authentication:","text":"<p>Set an environment variable in the receiver: <pre><code>export AUTH_TOKEN=\"your-super-secret-token\"\n</code></pre></p> <p>Then send requests using: <pre><code>curl -X POST http://receiver-url/sync \\\n  -H \"Authorization: Bearer your-super-secret-token\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"app\":\"your-app\"}'\n</code></pre></p> <p>If <code>AUTH_TOKEN</code> is not set, the endpoint is open (useful for internal testing).</p> <p>For production, it's recommended to use this token via: - ENV in Kubernetes Deployment - <code>valueFrom</code> linked to a Kubernetes Secret</p>"},{"location":"security/#rate-limiting-recommended","title":"\ud83d\udea8 Rate Limiting (recommended)","text":"<p>Use a reverse proxy or ingress controller to add rate limiting:</p> <pre><code>nginx.ingress.kubernetes.io/limit-connections: \"5\"\nnginx.ingress.kubernetes.io/limit-rpm: \"30\"\n</code></pre>"},{"location":"security/#suggested-enhancements-optional","title":"\ud83e\udde0 Suggested Enhancements (optional)","text":"Feature Status Bearer token auth \u2705 implemented HMAC validation \ud83d\udd1c planned mTLS enforcement \u2753 advanced <p>Security is an ongoing effort. Always review deployments, scan images with Trivy, and follow best practices from CNCF and OWASP.</p>"}]}